from datetime import datetime
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from jose import jwt
from pydantic import ValidationError
from schemas import TokenPayload
from fastapi import status, HTTPException, Depends
import sqlite3
from schemas import UserAuth, TokenSchema
import pymssql
from constants import (
    ALGORITHM,
    JWT_SECRET_KEY,
    ASPECT_DB,
    ASPECT_SERVER_HOST
)

reuseable_oauth = OAuth2PasswordBearer(
    tokenUrl="/identity/auth/request",
    scheme_name="JWT"
)

def validate_database_creds(user_cred: UserAuth) -> bool:
    conn = None
    try:
        conn = pymssql.connect( ##connect to server
            server=ASPECT_SERVER_HOST,
            user=user_cred.username,
            password=user_cred.password,
            database=ASPECT_DB
        )
        return True
    except pymssql.OperationalError: ##if login credentials were invalid
        return False
    except pymssql.Error: ##if the database is down
        return False
    finally:
        if conn is not None: ##do not close the db if it is None
            conn.close()



def validateUser(username: str) -> str:
    conn = sqlite3.connect('db/user.db') ##connect to sqllite3 db file
    cursor = conn.cursor()
    cursor.execute('SELECT username, password FROM user') ##select all username and passwords from the user table
    rows = cursor.fetchall()

    for row in rows: ##Iterate through each row
        if row[0] == username: ##if the username exists then return it's password
            password: str = row[1]
            conn.close() ##close db connection
            return password
    conn.close()
    return None ##return void


async def get_current_user(token: TokenSchema = Depends(reuseable_oauth)) -> UserAuth:
    try:
        payload = jwt.decode( ##decode token to extract username and expirary
            token, JWT_SECRET_KEY, algorithms=[ALGORITHM]
        )
        token_data = TokenPayload(**payload) ##save decoded data into TokenPayload object

        username: str = token_data.sub
        expiry : int = token_data.exp


        if datetime.fromtimestamp(expiry) < datetime.now(): ##if token is expired then raise an 401 Exception
            raise HTTPException(status_code = status.HTTP_401_UNAUTHORIZED, detail="Token expired", headers={"WWW-Authenticate": "Bearer"},)

        password = validateUser(username) ##find if the owner of the token is a valid user, then find the users password. If the user does not exist then return a 401 Exception
        if password is None:
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid Token")

        valid_user = UserAuth(username=username, password=password) ##save username and password into UserAuth obj then return the object

        return valid_user

    except(jwt.JWTError, ValidationError): ##if the token cannot be decoded (the token was not generated by aspect-rest-service)
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="Could not validate credentials", headers={"WWW-Authenticate": "Bearer"},)